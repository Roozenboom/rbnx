import type { Options } from '@wdio/types';
import { wdioConfig } from '<%= offsetFromRoot %>wdio.base.config';

export const config: Options.Testrunner = {
  ...wdioConfig,
  //
  // ==========================
  //  TypeScript Configuration
  // ==========================
  // Autocompile options for TypeScript
  autoCompileOpts: {
    autoCompile: true,
    tsNodeOpts: {
      transpileOnly: true,
      project: './tsconfig.json',
    },
  },<%
  if(options.specs || options.exclude) { %>
  //
  // ====================
  //  Specify Test Files
  // ====================
  // Define which test specs should run. The pattern is relative to the directory
  // of the configuration file being run.
  //
  // The specs are defined as an array of spec files (optionally using wildcards
  // that will be expanded). The test for each spec file will be run in a separate
  // worker process. In order to have a group of spec files run in the same worker
  // process simply enclose them in an array within the specs array.
  //<% 
  if(options.specs) { %>
  specs: ['<%= options.specs %>'],<% } %><%
  if(options.exclude) { %>
  exclude: ['<%= options.exclude %>'],<% } %><% } %><%
  if(options.maxInstances || options.capabilities) { %>
  //
  // ==============
  //  Capabilities
  // ==============
  // Define your capabilities here. WebdriverIO can run multiple capabilities at the same
  // time. Depending on the number of capabilities, WebdriverIO launches several test
  // sessions.  
  //<%
  if(options.maxInstances) { %>maxInstances: <%= options.maxInstances %>,<% } %><%
  if(options.maxInstancesPerCapability) { %>maxInstancesPerCapability: <%= options.maxInstancesPerCapability %>,<% } %><%
  if(options.capabilities) { %>capabilities: <%- JSON.stringify(options.capabilities) %>,<% } %>
  <% } %><%
  if(options.logLevel || options.outputDir || options.bail || options.baseUrl || options.waitforTimeout || options.framework) { %>
  //
  // =====================
  //  Test Configurations
  // =====================
  // Define all options that are relevant for the WebdriverIO instance here<% 
  if(options.logLevel) { %>
  //
  // Level of logging verbosity: trace | debug | info | warn | error | silent
  logLevel: '<%= options.logLevel %>',<% } %><% 
  if(options.outputDir) { %>
  //
  // Set directory to store all logs into
  outputDir: '<%= options.outputDir %>',<% } %><% 
  if(options.bail) { %>
  //
  // If you only want to run your tests until a specific amount of tests have failed use
  // bail (default is 0 - don't bail, run all tests).
  bail: <%= options.bail %>,<% } %><% 
  if(options.baseUrl) { %>
  //
  // Set a base URL in order to shorten url command calls. If your `url` parameter starts
  // with `/`, the base url gets prepended, not including the path portion of your baseUrl.
  // If your `url` parameter starts without a scheme or `/` (like `some/path`), the base url
  // gets prepended directly.
  baseUrl: '<%= options.baseUrl %>',<% } %><% 
  if(options.waitforTimeout) { %>
  //
  // Default timeout for all waitFor* commands.  
  waitforTimeout: <%= options.waitforTimeout %>,<% } %><% 
  if(options.specFileRetries) { %>
  //
  // The number of times to retry the entire specfile when it fails as a whole
  specFileRetries: <%= options.specFileRetries %>,<% } %><%
  if(options.specFileRetriesDelay) { %>
  //
  // Delay in seconds between the spec file retry attempts
  specFileRetriesDelay: <%= options.specFileRetriesDelay %>,<% } %><%
  if(options.specFileRetriesDeferred) { %>
  //
  // Whether or not retried specfiles should be retried immediately or deferred to the end of the queue
  specFileRetriesDeferred: <%= options.specFileRetriesDeferred %>,<% } %><% 
  if(options.framework) { %>
  //
  // =========================
  //  Framework Configuration
  // =========================
  // Framework you want to run your specs with.
  // The following are supported: Mocha, Jasmine, and Cucumber
  // see also: https://webdriver.io/docs/frameworks
  //
  // Make sure you have the wdio adapter package for the specific framework installed before running any tests.  
  framework: '<%= options.framework %>',<% } %><%
  if(options.framework === 'mocha') { %>
  //
  // Options to be passed to Mocha.
  // See the full list at http://mochajs.org/  
  mochaOpts: {
    ui: 'bdd',
    timeout: 60000
  },<% 
  } else if (options.framework === 'jasmine') { %>
  //
  // Options to be passed to Jasmine.
  jasmineOpts: {
    // Jasmine default timeout
    defaultTimeoutInterval: 60000,
    //
    // The Jasmine framework allows interception of each assertion in order to log the state of the application
    // or website depending on the result. For example, it is pretty handy to take a screenshot every time
    // an assertion fails.
    expectationResultHandler: function(passed, assertion) {
        // do something
    }
  },<% } %><% } %><% 
  if(options.services) { %>
  //
  // ========================
  //  Services Configuration
  // ========================  
  // Test runner services
  // Services take over a specific job you don't want to take care of. They enhance
  // your test setup with almost no effort. Unlike plugins, they don't add new
  // commands. Instead, they hook themselves up into the test process.
  services:  [<%  for (let service of options.services){ %>'<%= service %>',<% } %>],<% } %><% 
  if(options.reporters) { %>
  //
  // ========================
  //  Reporter Configuration
  // ========================
  // Test reporter for stdout.
  // The only one supported by default is 'dot'
  // see also: https://webdriver.io/docs/dot-reporter
  reporters: [<%  for (let reporter of options.reporters){ %>'<%= reporter %>',<% } %>],<% } %>
  //
  // =======
  //  Hooks
  // =======
  // WebdriverIO provides several hooks you can use to interfere with the test process in order to enhance
  // it and to build services around it. You can either apply a single function or an array of
  // methods to it. If one of them returns with a promise, WebdriverIO will wait until that promise got
  // resolved to continue.
  /**
    * Gets executed once before all workers get launched.
    * @param {Object} config wdio configuration object
    * @param {Array.<Object>} capabilities list of capabilities details
    */
  // onPrepare: function (config, capabilities) {
  // },
  /**
    * Gets executed before a worker process is spawned and can be used to initialise specific service
    * for that worker as well as modify runtime environments in an async fashion.
    * @param  {String} cid      capability id (e.g 0-0)
    * @param  {[type]} caps     object containing capabilities for session that will be spawn in the worker
    * @param  {[type]} specs    specs to be run in the worker process
    * @param  {[type]} args     object that will be merged with the main configuration once worker is initialized
    * @param  {[type]} execArgv list of string arguments passed to the worker process
    */
  // onWorkerStart: function (cid, caps, specs, args, execArgv) {
  // },
  /**
    * Gets executed just after a worker process has exited.
    * @param  {String} cid      capability id (e.g 0-0)
    * @param  {Number} exitCode 0 - success, 1 - fail
    * @param  {[type]} specs    specs to be run in the worker process
    * @param  {Number} retries  number of retries used
    */
  // onWorkerEnd: function (cid, exitCode, specs, retries) {
  // },
  /**
    * Gets executed just before initialising the webdriver session and test framework. It allows you
    * to manipulate configurations depending on the capability or spec.
    * @param {Object} config wdio configuration object
    * @param {Array.<Object>} capabilities list of capabilities details
    * @param {Array.<String>} specs List of spec file paths that are to be run
    * @param {String} cid worker id (e.g. 0-0)
    */
  // beforeSession: function (config, capabilities, specs, cid) {
  // },
  /**
    * Gets executed before test execution begins. At this point you can access to all global
    * variables like `browser`. It is the perfect place to define custom commands.
    * @param {Array.<Object>} capabilities list of capabilities details
    * @param {Array.<String>} specs        List of spec file paths that are to be run
    * @param {Object}         browser      instance of created browser/device session
    */
  // before: function (capabilities, specs) {
  // },
  /**
    * Runs before a WebdriverIO command gets executed.
    * @param {String} commandName hook command name
    * @param {Array} args arguments that command would receive
    */
  // beforeCommand: function (commandName, args) {
  // },<%
  if(options.framework === 'mocha' || options.framework === 'jasmine') { %>
  /**
    * Hook that gets executed before the suite starts
    * @param {Object} suite suite details
    */
  // beforeSuite: function (suite) {
  // },
  /**
    * Function to be executed before a test (in Mocha/Jasmine only)
    * @param {Object} test    test object
    * @param {Object} context scope object the test was executed with
    */
  // beforeTest: function (test, context) {
  // },
  /**
    * This hook gets executed _before_ every hook within the suite starts.
    * (For example, this runs before calling `before`, `beforeEach`, `after`, `afterEach` in Mocha.). 
    *
    */
  // beforeHook: function (test, context) {
  // },
  /**
    * Hook that gets executed _after_ every hook within the suite ends.
    * (For example, this runs after calling `before`, `beforeEach`, `after`, `afterEach` in Mocha.). 
    */
  // afterHook: function (test, context, { error, result, duration, passed, retries }) {
  // },
  /**
    * Hook that gets executed after the suite has ended
    * @param {Object} suite suite details
    */
  // afterSuite: function (suite) {
  // },<% }
  if(options.framework === 'cucumber') { %>
  /**
    * Cucumber Hooks
    *
    * Runs before a Cucumber Feature.
    * @param {String}                   uri      path to feature file
    * @param {GherkinDocument.IFeature} feature  Cucumber feature object
    */
  // beforeFeature: function (uri, feature) {
  // },
  /**
    *
    * Runs before a Cucumber Scenario.
    * @param {ITestCaseHookParameter} world    world object containing information on pickle and test step
    * @param {Object}                 context  Cucumber World object
    */
  // beforeScenario: function (world, context) {
  // },
  /**
    *
    * Runs before a Cucumber Step.
    * @param {Pickle.IPickleStep} step     step data
    * @param {IPickle}            scenario scenario pickle
    * @param {Object}             context  Cucumber World object
    */
  // beforeStep: function (step, scenario, context) {
  // },
  /**
    *
    * Runs after a Cucumber Step.
    * @param {Pickle.IPickleStep} step             step data
    * @param {IPickle}            scenario         scenario pickle
    * @param {Object}             result           results object containing scenario results
    * @param {boolean}            result.passed    true if scenario has passed
    * @param {string}             result.error     error stack if scenario failed
    * @param {number}             result.duration  duration of scenario in milliseconds
    * @param {Object}             context          Cucumber World object
    */
  // afterStep: function (step, scenario, result, context) {
  // },
  /**
    *
    * Runs after a Cucumber Scenario.
    * @param {ITestCaseHookParameter} world            world object containing information on pickle and test step
    * @param {Object}                 result           results object containing scenario results
    * @param {boolean}                result.passed    true if scenario has passed
    * @param {string}                 result.error     error stack if scenario failed
    * @param {number}                 result.duration  duration of scenario in milliseconds
    * @param {Object}                 context          Cucumber World object
    */
  // afterScenario: function (world, result, context) {
  // },
  /**
    *
    * Runs after a Cucumber Feature.
    * @param {String}                   uri      path to feature file
    * @param {GherkinDocument.IFeature} feature  Cucumber feature object
    */
  // afterFeature: function (uri, feature) {
  // },
  <% } %>
  /**
    * Runs after a WebdriverIO command gets executed
    * @param {String} commandName hook command name
    * @param {Array} args arguments that command would receive
    * @param {Number} result 0 - command success, 1 - command error
    * @param {Object} error error object if any
    */
  // afterCommand: function (commandName, args, result, error) {
  // },
  /**
    * Gets executed after all tests are done. You still have access to all global variables from
    * the test.
    * @param {Number} result 0 - test pass, 1 - test fail
    * @param {Array.<Object>} capabilities list of capabilities details
    * @param {Array.<String>} specs List of spec file paths that ran
    */
  // after: function (result, capabilities, specs) {
  // },
  /**
    * Gets executed right after terminating the webdriver session.
    * @param {Object} config wdio configuration object
    * @param {Array.<Object>} capabilities list of capabilities details
    * @param {Array.<String>} specs List of spec file paths that ran
    */
  // afterSession: function (config, capabilities, specs) {
  // },
  /**
    * Gets executed after all workers got shut down and the process is about to exit. An error
    * thrown in the onComplete hook will result in the test run failing.
    * @param {Object} exitCode 0 - success, 1 - fail
    * @param {Object} config wdio configuration object
    * @param {Array.<Object>} capabilities list of capabilities details
    * @param {<Object>} results object containing test results
    */
  // onComplete: function(exitCode, config, capabilities, results) {
  // },
  /**
  * Gets executed when a refresh happens.
  * @param {String} oldSessionId session ID of the old session
  * @param {String} newSessionId session ID of the new session
  */
  // onReload: function(oldSessionId, newSessionId) {
  // }
 };